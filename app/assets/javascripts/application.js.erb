// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or any plugin's vendor/assets/javascripts directory can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file.
//
// Read Sprockets README (https://github.com/rails/sprockets#sprockets-directives) for details
// about supported directives.
//
//= require jquery
//= require jquery_ujs
//= require turbolinks
//= require_tree .
//= require phaser.min





var game = new Phaser.Game(800, 600, Phaser.AUTO, 'donut-knight', { preload: preload, create: create, update: update });

function preload() {
  game.load.spritesheet('knight', "<%= asset_path('chara7.png') %>", 32, 32);
  game.load.spritesheet('boss', "<%= asset_path('bigmonster1.gif') %>", 80, 80, 11);
  game.load.image('bullet', "<%= asset_path('donut.gif') %>");
}

var knight;
var boss;
var bullet;

var attackingDirection;
function create() {
	game.physics.startSystem(Phaser.Physics.ARCADE);

  knight = game.add.sprite(game.world.centerX, game.world.centerY, 'knight');
  knight.anchor.setTo(0.5, 0.5);
  knight.scale.setTo(2, 2);
  game.physics.arcade.enable(knight)

  boss = game.add.sprite(game.world.centerX+150, game.world.centerY, 'boss');
  boss.anchor.setTo(0.5, 0.5);
  boss.scale.setTo(2, 2);
  game.physics.arcade.enable(boss)


  knight.animations.add('walkDown', [3,4,5,4]);

  knight.animations.add('attackDown', [6, 7, 8, 3]);

  knight.animations.add('walkLeft', [12,13,14,13]);

  knight.animations.add('attackLeft', [15, 16, 17, 12]);

  knight.animations.add('walkRight', [21,22,23,22]);

  knight.animations.add('attackRight', [24, 25, 26, 21]);

  knight.animations.add('walkUp', [30,31,32,31]);

  knight.animations.add('attackUp', [33, 34, 35, 30]);

  boss.animations.add('rise', [0, 0, 0, 0, 1, 2, 3, 4]);

  boss.animations.play('rise', 5, false);
}

function update() {
	game.physics.arcade.overlap(bullet, boss, collisionHandler, null, this);
	knight.body.velocity.x = 0;
  knight.body.velocity.y = 0;

  if (game.input.keyboard.isDown(Phaser.Keyboard.LEFT))
  {
      knight.animations.play('walkLeft', 5, false);
      knight.body.velocity.x = -200;
      attackingDirection = "attackLeft"
  }
  else if (game.input.keyboard.isDown(Phaser.Keyboard.RIGHT))
  {
      knight.animations.play('walkRight', 5, false);
      knight.body.velocity.x = 200;
      attackingDirection = "attackRight";
  }
  else if (game.input.keyboard.isDown(Phaser.Keyboard.UP))
  {
      knight.animations.play('walkUp', 5, false);
      knight.body.velocity.y = -200;
      attackingDirection = "attackUp";
  }
  else if (game.input.keyboard.isDown(Phaser.Keyboard.DOWN))
  {
      knight.animations.play('walkDown', 5, false);
      knight.body.velocity.y = 200;
      attackingDirection = "attackDown";
  }



  if (game.input.keyboard.isDown(Phaser.Keyboard.SPACEBAR))
  {
      fireBullet;
      knight.animations.play(attackingDirection, 5, false);
  }

}

function resetBullet (bullet) {

    bullet.kill();

}

function fireBullet () {

  if (game.time.now > bulletTime)
    {
        bullet = bullets.getFirstExists(false);

        if (bullet)
        {
            bullet.reset(sprite.x + 6, sprite.y - 8);
            bullet.body.velocity.y = -300;
            bulletTime = game.time.now + 250;
        }
    }

}

function collisionHandler (bullet, boss) {

  //  If the player collides with a chilli it gets eaten :)


}