var levelThree = function() {
  // set global variables
  var bulletTime = 0;
  var bullet;
  var hazards = [];
  var walls = [];
  var wizardBullet;
  var collisionHasOccurred = false;
  var knightTookDamage = true;
  var enemiesAlive = 3;
  function randomPosition() {
    min = Math.ceil(32);
    max = Math.floor(568);
    return Math.random() * (568 - 32) + 16;
  }

  // create game environment
  var game = new Phaser.Game(600, 600, Phaser.AUTO, 'donut-knight', { preload: preload, create: create, update: update });

  // preload all assets
  function preload() {
    game.load.image('fireball', "<%= asset_path('fireball.png') %>")
    game.load.image('gameOver', "<%= asset_path('end.png') %>");
    game.load.image('win', "<%= asset_path('clear.png') %>");
    game.load.spritesheet('wizard', "<%= asset_path('chara6.png') %>", 32, 32);
    game.load.spritesheet('knight', "<%= asset_path('chara5.png') %>", 32, 32);
    game.load.spritesheet('boss', "<%= asset_path('bigmonster1.gif') %>", 80, 80, 11);
    game.load.image('bullet', "<%= asset_path('donut.gif') %>");
    game.load.spritesheet('background', "<%= asset_path('map0.png') %>", 16, 16, 28);
    game.load.spritesheet('environment', "<%= asset_path('map1.png') %>", 16, 16, 256);
  }

  // mobile fullscreen setup
  // game.scale.fullScreenScaleMode = Phaser.ScaleManager.EXACT_FIT;

  // create things in the game environment
  function create() {
    // set environment bounds
    game.world.setBounds(0, 0, 600, 600);

    // go fullscreen if playing on mobile
    if (!game.device.desktop){ game.input.onDown.add(gofull, this); }

    // enable arcade physics(collision detection, initial sprite positions, etc.)
  	game.physics.startSystem(Phaser.Physics.ARCADE);

    // create tile background using one frame from a spritesheet
  	game.add.tileSprite(0, 0, 600, 600, 'background', 5);

    var topSide = game.add.tileSprite(0, 0, 600, 16, 'environment', 23);
    var bottomSide = game.add.tileSprite(0, 584, 600, 16, 'environment', 45);
    var leftSide = game.add.tileSprite(0, 16, 16, 576, 'environment', 7);
    var rightSide = game.add.tileSprite(584, 16, 16, 576, 'environment', 7);

    walls.push(topSide, bottomSide, leftSide, rightSide);
    game.physics.enable(walls, Phaser.Physics.ARCADE);
    for(var i = 0; i < walls.length; i++){
      walls[i].enableBody;
      walls[i].body.immovable = true;
    }

    for(var i = 0; i < 8; i++){
      hazards[i] = game.add.tileSprite(randomPosition(), randomPosition(), 16, 16, 'environment', 43);
      game.physics.enable(hazards[i], Phaser.Physics.ARCADE);
      hazards[i].enableBody = true;
      hazards[i].body.immovable = true;
      hazards[i].scale.setTo(1.2,1.2);
    }

    // render knight sprite, set initial position, enable physics on this object
    knight = setupKnight(game);
    setTimeout(function(){
      knightTookDamage = false;
    }, 3000);

    // render boss sprite: Dragon
    boss = setupDragon(game);

    // setup wizards group
    wizards = []

    // render wizard sprites and attributes
    wizard1 = setupWizard(game, 6);
    wizards.push(wizard1);

    wizard2 = setupWizard(game, 6);
    wizards.push(wizard2);

    // setup bullets group
    bullets = setupBullets(game);

    // setup wizard bullets


    for(var w = 0; w < wizards.length; w++){
      wizards[w].bullets = setupWizardBullets(game);
    }
  }

  // update game environment
  function update() {
    // enable collision between knight and boss
    game.physics.arcade.collide(knight, boss, enemyPlayerCollisionHandler, null, this);
    // enable collision between knight and wizards
    game.physics.arcade.collide(knight, wizards, enemyPlayerCollisionHandler, null, this);
    // enable collision between wizards and other wizards
    game.physics.arcade.collide(wizards, wizards);
    // enable collision between wizards and the boss
    game.physics.arcade.collide(wizards, boss);

    game.physics.arcade.collide(wizards, walls);

    game.physics.arcade.collide(knight, hazards, enemyPlayerCollisionHandler, null, this);

    game.physics.arcade.collide(knight, walls);
    // enable collision between wizard bullets and the player
    for(var w = 0; w < wizards.length; w++){
      game.physics.arcade.collide(knight, wizards[w].bullets, playerBulletCollisionHandler, null, this);
    }

    // enable overlapping physics between bullets and boss
  	game.physics.arcade.overlap(bullet, boss, collisionHandler, null, this);
    // add wizards and bullets to overlapping physics (physics that do the same thing to diff. objects)
    game.physics.arcade.overlap(bullet, wizards, collisionHandler, null, this);

    // prevent defaults (like jQuery)
    this.game.input.keyboard.addKeyCapture(Phaser.Keyboard.LEFT);
    this.game.input.keyboard.addKeyCapture(Phaser.Keyboard.RIGHT);
    this.game.input.keyboard.addKeyCapture(Phaser.Keyboard.UP);
    this.game.input.keyboard.addKeyCapture(Phaser.Keyboard.DOWN);
    this.game.input.keyboard.addKeyCapture(Phaser.Keyboard.SPACEBAR);

    // bind knight animations, attack direction, and movement to up, down, left, and right arrows
    if (collisionHasOccurred) {

    } else if (game.input.keyboard.isDown(Phaser.Keyboard.LEFT)){
      knight.animations.play('walkLeft', 8, false);
      knight.body.velocity.y = 0;
      knight.body.velocity.x = -200;
      attackingDirection = "attackLeft";
    }
    else if (game.input.keyboard.isDown(Phaser.Keyboard.RIGHT)){
      knight.animations.play('walkRight', 8, false);
      knight.body.velocity.y = 0;
      knight.body.velocity.x = 200;
      attackingDirection = "attackRight";
    }
    else if (game.input.keyboard.isDown(Phaser.Keyboard.UP)){
      knight.animations.play('walkUp', 8, false);
      knight.body.velocity.x = 0;
      knight.body.velocity.y = -200;
      attackingDirection = "attackUp";
    }
    else if (game.input.keyboard.isDown(Phaser.Keyboard.DOWN)){
      knight.animations.play('walkDown', 8, false);
      knight.body.velocity.x = 0;
      knight.body.velocity.y = 200;
      attackingDirection = "attackDown";
    } else {
      // stop movement when keys are not pressed
    	knight.body.velocity.x = 0;
      knight.body.velocity.y = 0;
    }

    // uses set knight attacking direction to SHOOT F**KING DONUTS FROM HIS SWORD!!!!!
    if (game.input.keyboard.isDown(Phaser.Keyboard.SPACEBAR)){
      fireBullet(attackingDirection);
      knight.animations.play(attackingDirection, 8, false);
    };

    // play wizard movement animations
    for (var i = 0; i<wizards.length; i++){
      var wizard = wizards[i];
      if (wizard.health >= 1) {
        if (wizard.body.velocity.x < 0 &&
            wizard.body.velocity.x <= wizard.body.velocity.y*-1 &&
            wizard.body.velocity.x <= wizard.body.velocity.y){
          wizard.animations.play('walkLeft', 8, true);
        } else if (wizard.body.velocity.x > 0 &&
                   wizard.body.velocity.x >= wizard.body.velocity.y*-1 &&
                   wizard.body.velocity.x >= wizard.body.velocity.y) {
          wizard.animations.play('walkRight', 8, true);
        } else if (wizard.body.velocity.y < 0 &&
                   wizard.body.velocity.y < wizard.body.velocity.x*-1 &&
                   wizard.body.velocity.y < wizard.body.velocity.x) {
          wizard.animations.play('walkUp', 8, true);
        } else if (wizard.body.velocity.y > 0 &&
                   wizard.body.velocity.y > wizard.body.velocity.x*-1 &&
                   wizard.body.velocity.y > wizard.body.velocity.x) {
          wizard.animations.play('walkDown', 8, true);
        } else {
          randomMovement(wizard);
        }
      } else if (wizard.health <= 0) {
        // destroy random movement event if wizard is dead
        game.time.events.destroy();
      }
    }

    // allow wizards to shoot bullets
    for(var w = 0; w < wizards.length; w++){
      wizardFireBullet(wizards[w], knight);
    }
  }

  // fires bullets(donuts) in different directions based on attacking direction
  // prevents additional shots based on 'bullet time' (can only fire once per second)
  // bullet time is there because idk how to make all bullets hit
  // the boss when more than one bullet is on the screen lol PLS FIX
  function fireBullet(direction) {
    if (game.time.now > bulletTime){
      bullet = bullets.getFirstExists(false);
      game.add.tween(bullet).to( { angle: 360 }, 2000, Phaser.Easing.Linear.None, true);
      if (bullet){
        if (direction == "attackLeft"){
          bullet.reset(knight.x - 5, knight.y);
          bullet.body.velocity.x = -400;
          bulletTime = game.time.now + 1000;
        }else if (direction == "attackRight"){
        	bullet.reset(knight.x + 5, knight.y);
          bullet.body.velocity.x = 400;
          bulletTime = game.time.now + 1000;
        }else if (direction == "attackUp"){
        	bullet.reset(knight.x, knight.y - 5);
          bullet.body.velocity.y = -400;
          bulletTime = game.time.now + 1000;
        }else if (direction == "attackDown"){
        	bullet.reset(knight.x, knight.y + 5);
          bullet.body.velocity.y = 400;
          bulletTime = game.time.now + 1000;
        }
      }
    }
  }

  function wizardFireBullet(wizard, knight) {
    if (game.time.now > wizard.cooldown){
      wizardBullet = wizard.bullets.getFirstExists(false);
      game.add.tween(wizardBullet).to( { angle: 360 }, 2000, Phaser.Easing.Linear.None, true);
      if (wizardBullet){
        if (knight.position.x < wizard.position.x &&
            wizard.position.y - 50 <= knight.position.y &&
            wizard.position.y + 50 >= knight.position.y){
          wizardBullet.reset(wizard.position.x, wizard.position.y + 25);
          wizardBullet.body.velocity.x = -200;
          wizard.cooldown = game.time.now + 1000;
        }else if (knight.position.x > wizard.position.x &&
                  wizard.position.y - 50 <= knight.position.y &&
                  wizard.position.y + 50 >= knight.position.y){
        	wizardBullet.reset(wizard.position.x + 50, wizard.position.y + 25);
          wizardBullet.body.velocity.x = 200;
          wizard.cooldown = game.time.now + 1000;
        }else if (knight.position.y < wizard.position.y &&
                  wizard.position.x - 50 <= knight.position.x &&
                  wizard.position.x + 50 >= knight.position.x){
        	wizardBullet.reset(wizard.position.x + 25, wizard.position.y);
          wizardBullet.body.velocity.y = -200;
          wizard.cooldown = game.time.now + 1000;
        }else if (knight.position.y > wizard.position.y &&
                  wizard.position.x - 50 <= knight.position.x &&
                  wizard.position.x + 50 >= knight.position.x){
        	wizardBullet.reset(wizard.position.x + 25, wizard.position.y + 50);
          wizardBullet.body.velocity.y = 200;
          wizard.cooldown = game.time.now + 1000;
        } else {

        }
      }
    }
  }

  function playerBulletCollisionHandler (knight, bullet) {
    if (knightTookDamage) {
      bullet.kill();
    } else {
      bullet.kill();
      collisionHasOccurred = true;
      knightTookDamage = true;
      setTimeout(function(){
        collisionHasOccurred = false;
      }, 100)

      setTimeout(function(){
        knightTookDamage = false;
      }, 500)

      if (knight.body.touching.right){
        knight.body.velocity.x = -500;
      } else if (knight.body.touching.left){
        knight.body.velocity.x = 500;
      } else if (knight.body.touching.up){
        knight.body.velocity.y = 500;
      } else if (knight.body.touching.down){
        knight.body.velocity.y = -500;
      }

      console.log('ouch!');
      knight.health -= 1;
      console.log(`your health is ${knight.health}`);

      if (knight.health == 0){
      	game.input.keyboard.destroy();
      	knight.body.velocity.x = 0;
      	knight.body.velocity.y = 0;
        knight.animations.play('spin', 8, false, true)
      	setTimeout(function(){
          lost = game.add.sprite(game.world.centerX-100, 20, 'gameOver');
    		}, 2000);
        setTimeout(function(){
          game.destroy();
          levelTwo();
        }, 5000)
      };
    }

  }

  function enemyPlayerCollisionHandler (knight, enemy) {
    if (knightTookDamage) {

    } else {
      collisionHasOccurred = true;
      knightTookDamage = true;
      setTimeout(function(){
        collisionHasOccurred = false;
      }, 100)

      setTimeout(function(){
        knightTookDamage = false;
      }, 500)

      if (knight.body.touching.right){
        knight.body.velocity.x = -500;
      } else if (knight.body.touching.left){
        knight.body.velocity.x = 500;
      } else if (knight.body.touching.up){
        knight.body.velocity.y = 500;
      } else if (knight.body.touching.down){
        knight.body.velocity.y = -500;
      }

      console.log('ouch!');
      knight.health -= 1;
      console.log(`your health is ${knight.health}`);

      if (knight.health == 0){
      	game.input.keyboard.destroy();
      	knight.body.velocity.x = 0;
      	knight.body.velocity.y = 0;
        knight.animations.play('spin', 8, false, true)
      	setTimeout(function(){
          lost = game.add.sprite(game.world.centerX-100, 20, 'gameOver');
    		}, 2000);
        setTimeout(function(){
          game.destroy();
          levelThree();
        }, 5000)
      };
    }

  }

  // handles collision between bullets and enemy
  function collisionHandler (bullet, enemy) {

    // bullets disappear when they hit the enemy and do health damage
  	bullet.kill();
    enemy.health -= 1;

    // if enemy is dead, play death animation and decrement enemy count
    if (enemy.health == 0){
      enemiesAlive -= 1;
      enemy.body.velocity.x = 0;
      enemy.body.velocity.y = 0;
      enemy.body.destroy();
      if(enemy.bullets){
        enemy.bullets.destroy();
      }
      enemy.animations.play('die', 8, false, true);
    }else if (enemy.health <= 0){
      enemy.animations.play('die', 8, false, true);
    }else{
      enemy.animations.play('flinch', 8, false);
    }

    // if all enemies are dead, stop player movement, make knight hit a sweet spin move,
    // display winning text
    // a few seconds after that, delete entire game environment, then start new level
    if (enemiesAlive <= 0){
    	game.input.keyboard.destroy();
    	knight.body.velocity.x = 0;
    	knight.body.velocity.y = 0;
    	setTimeout(function(){
        won = game.add.sprite(game.world.centerX-130, 20, 'win');
      	knight.animations.play('victorious', 8, false);
  		}, 2000);
      setTimeout(function(){
        game.destroy();
        levelFour();
      }, 5000)
    };
  };

  // fullscreen function (for mobile)
  function gofull() { game.scale.startFullScreen(false);}
}

function stopMovement(sprite) {
  sprite.body.velocity.x = 0;
  sprite.body.velocity.y = 0;
}
