var levelThree = function() {
  // set global variables
  var knight;
  var bat1;
  var bat2;
  var bat3;
  var bats;
  var boss;
  var bullets;
  var bulletTime = 0;
  var bullet;
  var won;
  var collisionHasOccurred = false;
  var knightTookDamage = false;
  var attackingDirection;
  var enemiesAlive = 4;
  var randomPosition =  function() {
    return Math.random()*600;
  };

  // create game environment
  var game = new Phaser.Game(600, 600, Phaser.AUTO, 'donut-knight', { preload: preload, create: create, update: update });

  // preload all assets
  function preload() {
    game.load.image('win', "<%= asset_path('clear.png') %>");
    game.load.image('gameOver', "<%= asset_path('end.png') %>");
    game.load.spritesheet('bat', "<%= asset_path('monster3.gif') %>", 48, 48, 11);
    game.load.spritesheet('knight', "<%= asset_path('chara5.png') %>", 32, 32);
    game.load.spritesheet('boss', "<%= asset_path('monster5.gif') %>", 80, 80, 11);
    game.load.image('bullet', "<%= asset_path('donut.gif') %>");
    game.load.spritesheet('background', "<%= asset_path('map0.png') %>", 16, 16, 28);
  }

  // mobile fullscreen setup
  // game.scale.fullScreenScaleMode = Phaser.ScaleManager.EXACT_FIT;

  // create things in the game environment
  function create() {
    // set environment bounds
    game.world.setBounds(0, 0, 600, 600);

    // go fullscreen if playing on mobile
    if (!game.device.desktop){ game.input.onDown.add(gofull, this); }

    // enable arcade physics(collision detection, initial sprite positions, etc.)
  	game.physics.startSystem(Phaser.Physics.ARCADE);

    // create tile background using one frame from a spritesheet
  	game.add.tileSprite(0, 0, 600, 600, 'background', 2);

    // render knight sprite, set initial position, enable physics on this object
    knight = game.add.sprite(game.world.centerX-150, game.world.centerY, 'knight');
    game.camera.follow(knight, Phaser.Camera.FOLLOW_LOCKON);
    game.physics.arcade.enable(knight, Phaser.Physics.ARCADE)
    knight.enableBody = true;
    knight.collideWorldBounds = true;
    knight.body.collideWorldBounds = true;
    knight.anchor.setTo(0.5, 0.5);
    knight.scale.setTo(1.5, 1.5);
    knight.health = 10;

    // set up custom animations using .gif or .png spritesheet
    knight.animations.add('walkDown', [3,4,5,4]);
    knight.animations.add('attackDown', [6, 7, 8, 3]);
    knight.animations.add('walkLeft', [12,13,14,13]);
    knight.animations.add('attackLeft', [15, 16, 17, 12]);
    knight.animations.add('walkRight', [21,22,23,22]);
    knight.animations.add('attackRight', [24, 25, 26, 21]);
    knight.animations.add('walkUp', [30,31,32,31]);
    knight.animations.add('attackUp', [33, 34, 35, 30]);
    knight.animations.add('victorious', [1, 1, 1, 6, 7, 16, 34, 25, 6, 7, 7, 8])
    knight.animations.add('spin', [1, 10, 28, 19, 1]);

    // render boss sprite: Dragon
    boss = game.add.sprite(game.world.centerX+150, game.world.centerY, 'boss');

    // set up custom boss animations for each sprite
    boss.animations.add('rise', [ 3, 3, 2, 4, 0, 4, 0, 1, 7, 8, 9, 9, 9, 9, 10]);
    boss.animations.add('neutral', [10, 6]);
    boss.animations.add('flinch', [5, 7, 7, 8, 9, 10]);
    boss.animations.add('die', [5, 7, 7, 7, 5, 9, 9, 9, 9, 10, 1, 2, 4, 3, 0]);

    // setup bats group
    bats = []

    // render bat sprites and attributes
    bat1 = game.add.sprite(randomPosition(), randomPosition(), 'bat')
    game.physics.enable(bat1, Phaser.Physics.ARCADE);
    setupBat(bat1, 6);
    bats.push(bat1);
    // add randomized movement to bat
    game.time.events.repeat(Phaser.Timer.SECOND * 2, 1000, randomMovement, game, bat1);

    bat2 = game.add.sprite(randomPosition(), randomPosition(), 'bat')
    game.physics.enable(bat2, Phaser.Physics.ARCADE);
    setupBat(bat2, 6);
    bats.push(bat2);
    // add randomized movement to bat
    game.time.events.repeat(Phaser.Timer.SECOND * 3, 1000, randomMovement, game, bat2);

    bat3 = game.add.sprite(randomPosition(), randomPosition(), 'bat')
    game.physics.enable(bat3, Phaser.Physics.ARCADE);
    setupBat(bat3, 6);
    bats.push(bat3);
    // add randomized movement to bat
    game.time.events.repeat(Phaser.Timer.SECOND * 2.5, 1000, randomMovement, game, bat3);

    // setup boss health, initial position, enable physics on this object
    boss.health = 5;
    boss.anchor.setTo(0.5, 0.6);
    boss.scale.setTo(1.5, 1.5);
    game.physics.arcade.enable(boss, Phaser.Physics.ARCADE)
    boss.body.immovable = true;

    // setup bullets group
    bullets = game.add.group();
    bullets.enableBody = true;
    bullets.physicsBodyType = Phaser.Physics.ARCADE;

    // individual bullet setup and physics
    for (var i = 0; i < 20; i++){
      var b = bullets.create(0, 0, 'bullet');
      b.name = 'bullet' + i;
      b.anchor.setTo(0.5, 0.5);
      b.scale.setTo(1, 1);
      b.exists = false;
      b.visible = false;
      b.checkWorldBounds = true;
      b.events.onOutOfBounds.add(resetBullet, this);
    }

    // opening animations
    knight.animations.play('spin', 8, false);
    boss.animations.play('rise', 8, false);
  }

  // update game environment
  function update() {
    // enable collision between knight and boss
    game.physics.arcade.collide(knight, boss, enemyPlayerCollisionHandler, null, this);
    // enable collision between knight and bats
    game.physics.arcade.collide(knight, bats, enemyPlayerCollisionHandler, null, this);
    // enable collision between bats and other bats
    game.physics.arcade.collide(bats, bats, enemyEnemyCollisionHandler, null, this);
    // enable collision between bats and the boss
    game.physics.arcade.collide(bats, boss, enemyBossCollisionHandler, null, this);

    // enable overlapping physics between bullets and boss
  	game.physics.arcade.overlap(bullet, boss, collisionHandler, null, this);
    // add bats and bullets to overlapping physics (physics that do the same thing to diff. objects)
    game.physics.arcade.overlap(bullet, bats, collisionHandler, null, this);



    // prevent defaults (like jQuery)
    this.game.input.keyboard.addKeyCapture(Phaser.Keyboard.LEFT);
    this.game.input.keyboard.addKeyCapture(Phaser.Keyboard.RIGHT);
    this.game.input.keyboard.addKeyCapture(Phaser.Keyboard.UP);
    this.game.input.keyboard.addKeyCapture(Phaser.Keyboard.DOWN);
    this.game.input.keyboard.addKeyCapture(Phaser.Keyboard.SPACEBAR);

    // bind knight animations, attack direction, and movement to up, down, left, and right arrows
    if (collisionHasOccurred) {

    } else if (game.input.keyboard.isDown(Phaser.Keyboard.LEFT)){
      knight.animations.play('walkLeft', 8, false);
      knight.body.velocity.y = 0;
      knight.body.velocity.x = -200;
      attackingDirection = "attackLeft";
    }
    else if (game.input.keyboard.isDown(Phaser.Keyboard.RIGHT)){
      knight.animations.play('walkRight', 8, false);
      knight.body.velocity.y = 0;
      knight.body.velocity.x = 200;
      attackingDirection = "attackRight";
    }
    else if (game.input.keyboard.isDown(Phaser.Keyboard.UP)){
      knight.animations.play('walkUp', 8, false);
      knight.body.velocity.x = 0;
      knight.body.velocity.y = -200;
      attackingDirection = "attackUp";
    }
    else if (game.input.keyboard.isDown(Phaser.Keyboard.DOWN)){
      knight.animations.play('walkDown', 8, false);
      knight.body.velocity.x = 0;
      knight.body.velocity.y = 200;
      attackingDirection = "attackDown";
    } else {
      // stop movement when keys are not pressed
    	knight.body.velocity.x = 0;
      knight.body.velocity.y = 0;
    }

    // uses set knight attacking direction to SHOOT F**KING DONUTS FROM HIS SWORD!!!!!
    if (game.input.keyboard.isDown(Phaser.Keyboard.SPACEBAR)){
      fireBullet(attackingDirection);
      knight.animations.play(attackingDirection, 8, false);
    };

    // play bat movement animations
    for (var i = 0; i < bats.length; i++) {
      if (bats[i].health >= 1) {
          bats[i].animations.play('walk', 8, true);
      } else if (bats[i].health <= 0) {
        // destroy random movement event if bat is dead
        game.time.events.destroy();
      }
    }

  }

  // create function to clear bullets from the screen
  function resetBullet (bullet) {
    bullet.kill();
  };

  // fires bullets(donuts) in different directions based on attacking direction
  // prevents additional shots based on 'bullet time' (can only fire once per second)
  // bullet time is there because idk how to make all bullets hit
  // the boss when more than one bullet is on the screen lol PLS FIX
  function fireBullet(direction) {
    if (game.time.now > bulletTime){
      bullet = bullets.getFirstExists(false);
      game.add.tween(bullet).to( { angle: 360 }, 2000, Phaser.Easing.Linear.None, true);
      if (bullet){
        if (direction == "attackLeft"){
          bullet.reset(knight.x - 5, knight.y);
          bullet.body.velocity.x = -400;
          bulletTime = game.time.now + 1000;
        }else if (direction == "attackRight"){
        	bullet.reset(knight.x + 5, knight.y);
          bullet.body.velocity.x = 400;
          bulletTime = game.time.now + 1000;
        }else if (direction == "attackUp"){
        	bullet.reset(knight.x, knight.y - 5);
          bullet.body.velocity.y = -400;
          bulletTime = game.time.now + 1000;
        }else if (direction == "attackDown"){
        	bullet.reset(knight.x, knight.y + 5);
          bullet.body.velocity.y = 400;
          bulletTime = game.time.now + 1000;
        }
      }
    }
  }

  function enemyPlayerCollisionHandler (knight, enemy) {
    if (knightTookDamage) {

    } else {
      collisionHasOccurred = true;
      knightTookDamage = true;
      setTimeout(function(){
        collisionHasOccurred = false;
      }, 100)

      setTimeout(function(){
        knightTookDamage = false;
      }, 2000)

      if (knight.body.touching.right){
        knight.body.velocity.x = -500;
      } else if (knight.body.touching.left){
        knight.body.velocity.x = 500;
      } else if (knight.body.touching.up){
        knight.body.velocity.y = 500;
      } else if (knight.body.touching.down){
        knight.body.velocity.y = -500;
      }

      console.log('ouch!');
      knight.health -= 1;
      console.log(`your health is ${knight.health}`);

      if (knight.health <= 0){
      	game.input.keyboard.destroy();
      	knight.body.velocity.x = 0;
      	knight.body.velocity.y = 0;
        knight.animations.play('spin', 8, false, true)
      	setTimeout(function(){
          lost = game.add.sprite(game.world.centerX-130, 20, 'gameOver');
    		}, 2000);
        setTimeout(function(){
          game.destroy();
          levelThree();
        }, 5000)
      };
    }

  }

  function enemyEnemyCollisionHandler (enemy1, enemy2) {
    enemy1.body.velocity.x = 0;
    enemy1.body.velocity.y = 0;
    if (enemy1.body.touching.right){
      enemy1.body.velocity.x = -100;
    } else if (enemy1.body.touching.left){
      enemy1.body.velocity.x = 100;
    } else if (enemy1.body.touching.up){
      enemy1.body.velocity.y = 100;
    } else if (enemy1.body.touching.down){
      enemy1.body.velocity.y = -100;
    }

    enemy2.body.velocity.x = 0;
    enemy2.body.velocity.y = 0;
    if (enemy2.body.touching.right){
      enemy2.body.velocity.x = -100;
    } else if (enemy2.body.touching.left){
      enemy2.body.velocity.x = 100;
    } else if (enemy2.body.touching.up){
      enemy2.body.velocity.y = 100;
    } else if (enemy2.body.touching.down){
      enemy2.body.velocity.y = -100;
    }
  }

  function enemyBossCollisionHandler (enemy, boss) {
    if (enemy.body.touching.right){
      enemy.body.velocity.x = -100;
    } else if (enemy.body.touching.left){
      enemy.body.velocity.x = 100;
    } else if (enemy.body.touching.up){
      enemy.body.velocity.y = 100;
    } else if (enemy.body.touching.down){
      enemy.body.velocity.y = -100;
    }
  }

  // handles collision between bullets and enemy
  function collisionHandler (bullet, enemy) {

    // bullets disappear when they hit the enemy and do health damage
  	bullet.kill();
    enemy.health -= 1;

    // if enemy is dead, play death animation and decrement enemy count
    if (enemy.health == 0){
      enemiesAlive -= 1;
      enemy.body.velocity.x = 0;
      enemy.body.velocity.y = 0;
      enemy.body.destroy();
      enemy.animations.play('die', 8, false, true);
    }else if (enemy.health <= 0){
      enemy.animations.play('die', 8, false, true);
    }else{
      enemy.animations.play('flinch', 10, false);
    }

    // if all enemies are dead, stop player movement, make knight hit a sweet spin move,
    // display winning text
    // a few seconds after that, delete entire game environment, then start new level
    if (enemiesAlive <= 0){
    	game.input.keyboard.destroy();
    	knight.body.velocity.x = 0;
    	knight.body.velocity.y = 0;
    	setTimeout(function(){
        won = game.add.sprite(game.world.centerX-130, 20, 'win');
      	knight.animations.play('victorious', 8, false);
  		}, 2000);
      setTimeout(function(){
        game.destroy();
        levelFour();
      }, 5000)
    };
  };

  // fullscreen function (for mobile)
  function gofull() { game.scale.startFullScreen(false);}
}

function stopMovement(sprite) {
  sprite.body.velocity.x = 0;
  sprite.body.velocity.y = 0;
}
